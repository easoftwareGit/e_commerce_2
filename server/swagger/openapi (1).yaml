---
openapi: 3.0.0
servers:
- url: http://localhost:5000
info:
  description: 'This is a sample E-Commerce 2.0 app. This project requires that you build a fully-functioning e-commerce application REST API that allows users to perform various CRUD operations such as registering an account, browsing products for sale, etc.'
  version: 2.0.0
  title: E-Commerce 2.0 REST API application
  termsOfService: https://www.codecademy.com/about
  contact:
    email: easoftware@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
- name: E-Commerce 2.0 
  description: Sample E-Commerce app 
- name: users
  description: Operations about users
paths:
  "/api/users":
    post:
      tags:
      - users
      summary: Create user
      description: This can only be done when the user registers.
      operationId: createUser
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Users"
        '400':
          description: email already used, required value missing
        '404':
          description: user not inserted
      requestBody:
        "$ref": "#/components/requestBodies/UsersPost"
    get:
      tags:
      - users
      summary: Gets all users
      description: ''
      operationId: getAllUsers
      responses:
        '200':
          description: successful opertion
          content:
            application/json:
              schema: 
                type: array
                items: 
                  "$ref": "#/components/schemas/Users"  
        '404':
          description: 'no user rows found'
  "/api/users/google":
    post:
      tags:
      - users
      summary: Create Google user
      description: Only used in testing
      operationId: createGoogleUser
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Users"
        '400':
          description: email already used, required value missing
        '404':
          description: user not inserted
      requestBody:
        "$ref": "#/components/requestBodies/UsersPost"
  "/users/{uuid}":
    get:
      tags:
      - users
      summary: Get user by user uuid
      description: ''
      operationId: getUserByUuid
      parameters:
      - name: uuid
        in: path
        description: 'The user uuid that needs to be fetched. Use "6714f724-f838-8f90-65a1-30359152dcdb" for testing. '
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Users"
        '404':
          description: Invalid User Uuid supplied, User not found
    put:
      tags:
      - users
      summary: update user by user uuid
      description: 'This can only be done by the logged in user.'
      operationId: updateUserByUuid
      parameters:
      - name: uuid
        in: path
        description: 'The uuid of user that needs to be updated. Use "6714f724-f838-8f90-65a1-30359152dcdb" for testing.'
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Users"
        '400':
          description: email already used, required value missing
        '404':
          description: Invalid User Uuid supplied, User not found
      requestBody:
        "$ref": "#/components/requestBodies/UsersPut"
    delete:
      tags:
      - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: uuid
        in: path
        description: 'The uuid of the user that needs to be deleted. In testing, use before() to generate user to delete.'
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Deleted user - user's uuid returned as a string
          content:
            text/plain: 
              schema:
                type: string
        '404':
          description: User not found
        '409':
          description: Cannot delete - constraint error
  "/auth/register":
    post:
      tags:
      - auth
      description: ''
      operationId: registerUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Users"
        '409': 
          description: email already in use
        '500': 
          description: could not create user
      requestBody:
        "$ref": "#/components/requestBodies/AuthRegister"
  "/auth/login":
    post:
      tags:
      - auth
      description: Uses passort and passport-local strategy
      operationId: loginUser
      responses:
        '200':
          description: logged in user - user's id returned as a string
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
      requestBody:
        "$ref": "#/components/requestBodies/AuthLogin"
  "/products":
    post:
      tags:
      - products
      description: Can only be done by admin
      operationId: createProduct
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Products"
        '400': 
          description: name already used, model_number already used, required value missing
        '404':
          description: Product not inserted
      requestBody:
        "$ref": "#/components/requestBodies/Products"
    get:
      tags:
      - products
      description: Can only be done by admin
      operationId: getProduct
      responses:
        '200':
          description: successful opertion
          content:
            application/json:
              schema: 
                type: array
                items: 
                  "$ref": "#/components/schemas/Products"  
        '404':
          description: 'no product rows found'
  "/products/{id}":  
    get:
      tags:
      - products
      summary: get procuct by product id
      description: ''
      operationId: getProductById
      parameters:
      - name: id
        in: path
        description: 'The product id that needs to be fetched. Use 2 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Products"
        '404':
          description: Invalid Product ID supplied, Product not found
    put:
      tags:
      - products
      summary: update product by product id
      description: Can only be done by admin
      operationId: updateProductById
      parameters:
      - name: id
        in: path
        description: 'The product id that needs to be updated. Use 2 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Products"
        '400':
          description: name already used, model_number already used, required value missing
        '404':
          description: Invalid Product ID supplied, Product not found
      requestBody:
        "$ref": "#/components/requestBodies/Products"
    delete:
      tags:
      - products
      summary: Delete product
      description: Can only be done by admin
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        description: 'The product id that needs to be deleted. In testing, use before() to generate product to delete.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Deleted product - product's id returned as a string
          content:
            text/plain: 
              schema:
                type: string
        '404':
          description: Product not found
        '409':
          description: Cannot delete - constraint error
  "/carts":
    post:
      tags:
      - carts
      summary: Create cart
      description: 'If non-exiatant, done by the app when the user selects a product to purchare.'
      operationId: createCart
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Carts"
        '400':
          description: user_id already used, required value missing
        '404':
          description: cart not inserted
        '409':
          description: user_id violates foreign key constraint
      requestBody:
        "$ref": "#/components/requestBodies/CartsPost"
    get:
      tags:
      - carts
      summary: Gets all carts
      description: ''
      operationId: getAllCarts
      responses:
        '200':
          description: successful opertion (No cart rows is OK, array is empty)
          content:
            application/json:
              schema: 
                type: array
                items: 
                  "$ref": "#/components/schemas/Carts"  
  "/carts/{id}":
    get:
      tags:
      - carts
      summary: Get cart by cart id
      description: ''
      operationId: getCartById
      parameters:
      - name: id
        in: path
        description: 'The cart id that needs to be fetched. Use 2 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Carts"
        '404':
          description: Invalid Cart ID supplied, Cart not found
    put:
      tags:
      - carts
      summary: update cart by cart id
      description: 'This can only be done by the logged in user.'
      operationId: updateCartById
      parameters:
      - name: id
        in: path
        description: 'The cart id of the cart that needs to be updated. Use 2 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Carts"
        '400':
          description: user_id already used, required value missing
        '404':
          description: Invalid Cart ID supplied, Cart not found
        '409':
          description: user_id violates foreign key constraint
      requestBody:
        "$ref": "#/components/requestBodies/CartsPut"
    delete:
      tags:
      - carts
      summary: Delete cart
      description: This can only be done by the app or Admin.
      operationId: deleteCart
      parameters:
      - name: id
        in: path
        description: 'The cart id that needs to be deleted. In testing, use before() to generate cart to delete.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Deleted cart - cart's id returned as a string
          content:
            text/plain: 
              schema:
                type: string
        '400': 
          description: unknown error
        '404':
          description: Cart not found
        '409':
          description: Cannot delete - constraint error        
  "/carts/{id}/allItems":
    delete:
      tags:
      - carts
      summary: Delete all cart items on a cart
      description: 'Done by the user.'
      operationId: deleteAllCartItems
      parameters:
      - name: id
        in: path
        description: 'The cart id with cart items to be deleted. In testing, use before() to generate cart id to delete.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Deleted cart items - cart's id returned as a string
          content:
            text/plain: 
              schema:
                type: string
        '404':
          description: Could not delete cart items, invalild cart id
  "/carts/{id}/checkout":
    post:
      tags:
      - carts
      summary: Places an order for user from cart
      description: Done by user. Get payment approval. Moves user's cart and cart items into orders and order items.
      operationId: checkout
      parameters:
      - name: id
        in: path
        description: 'The cart id with with cart items, used to create the order. In testing, use before() to generate cart id to delete. For testing, use quantity 5, user_id 2, and create a test cart with test items to use to checkout.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Orders"
        '400':
          description: could not remove cart, wrong number of cart items removed, could not move cart items into order items, could not create new orders from cart, could not get total price from cart
        '404':
          description: Invalid Cart ID supplied, could not place order
      requestBody:
        "$ref": "#/components/requestBodies/Carts"
  "/carts/{id}/items":
    post:
      tags:
      - carts
      summary: Create cart item
      description: 'Done when user adds an item to the cart.'
      operationId: createCartItem
      parameters:
      - name: id
        in: path
        description: 'The cart id link the cart item. Use 1 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Cart_items"
        '400':
          description: product id not valid, required value missing
        '404':
          description: cart not found
        '409':
          description: cart_id or product_id violates foreign key constraint
      requestBody:
        "$ref": "#/components/requestBodies/CartItemsPost"
    get:
      tags:
      - carts
      summary: Get cart items by cart id
      description: ''
      operationId: getCartItemsById
      parameters:
      - name: id
        in: path
        description: 'The cart id for items to be fetched. Use 1 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items: 
                  "$ref": "#/components/schemas/Cart_items"
        '404':
          description: Invalid Cart ID supplied, Cart not found
  "/carts/items/{itemId}":
    get:
      tags:
      - carts
      summary: Get cart item by cart item id
      description: ''
      operationId: getCartItemById
      parameters:
      - name: itemId
        in: path
        description: 'The cart item id that needs to be fetched. Use 2 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Cart_items"
        '404':
          description: Invalid Cart Item ID supplied, cart item not found
    put:
      tags:
      - carts
      summary: Get cart item by cart item id
      description: ''
      operationId: getCartItemByCartId
      parameters:
      - name: itemId
        in: path
        description: 'The cart item id for items to be fetched. Use 2 for testing.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Cart_items"
        '400':
          description: product id not valid, required value missing
        '404':
          description: Invalid Cart Item ID supplied, Cart Item not found
        '409':
          description: product_id violates foreign key constraint
      requestBody:
        "$ref": "#/components/requestBodies/CartItemsPut"
    delete:
      tags:
      - carts
      summary: Delete cart item
      description: Done by the user
      operationId: deleteCartItem
      parameters:
      - name: itemId
        in: path
        description: 'The cart item id that needs to be deleted. In testing, use before() to generate cart item to delete.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Deleted cart item - cart item's id returned as a string
          content:
            text/plain: 
              schema:
                type: string
        '404':
          description: Cart item not found, invalid cart item id
  "/orders":
    post:
      tags:
      - orders
      summary: Create order
      description: 'Done by the user'
      operationId: createOrder
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Orders"
        '400':
          description: required value missing, invalid data
        '409':
          description: order_id or product_id violates foreign key constraint
      requestBody:
        "$ref": "#/components/requestBodies/OrdersPost"
    get:
      tags:
      - orders
      summary: Gets all orders
      description: ''
      operationId: getAllOrders
      responses:
        '200':
          description: successful opertion (No orders rows is OK, array is empty)
          content:
            application/json:
              schema: 
                type: array
                items: 
                  "$ref": "#/components/schemas/Orders"
  "/orders/{id}":  
    get:
      tags:
      - orders
      summary: Get order by order id
      description: ''
      operationId: getOrderById
      parameters:
      - name: id
        in: path
        description: 'The order id that needs to be fetched. Use 2 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Orders"
        '404':
          description: Invalid Order ID supplied, Order not found
    put:
      tags:
      - orders
      summary: update order by order id
      description: 'This can only be done by the logged in user.'
      operationId: updateOrderById
      parameters:
      - name: id
        in: path
        description: 'The order id of the order that needs to be updated. Use 2 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Orders"
        '400':
          description: required value missing
        '404':
          description: Invalid Order ID supplied, Order not found
        '409':
          description: user_id violates foreign key constraint
      requestBody:
        "$ref": "#/components/requestBodies/OrdersPut"
    delete:
      tags:
      - orders
      summary: Delete order
      description: This can only be done by the app or Admin.
      operationId: deleteOrder
      parameters:
      - name: id
        in: path
        description: 'The order id that needs to be deleted. In testing, use before() to generate cart to delete.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Deleted order - order's id returned as a string
          content:
            text/plain: 
              schema:
                type: string
        '400': 
          description: unknown error
        '404':
          description: Order not found
        '409':
          description: Cannot delete - constraint error          
  "/orders/{id}/items":
    post:
      tags:
      - orders
      summary: Create order item
      description: 'Done when user checks out.'
      operationId: createOrderItem
      parameters:
      - name: id
        in: path
        description: 'The order id link the order item. Use 1 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Order_items"
        '400':
          description: product id not valid, required value missing
        '404':
          description: order not found
        '409':
          description: order_id or product_id violates foreign key constraint
      requestBody:
        "$ref": "#/components/requestBodies/CartItemsPost"
    get:
      tags:
      - orders
      summary: Get order items by order id
      description: ''
      operationId: getOrderItemsById
      parameters:
      - name: id
        in: path
        description: 'The order id for items to be fetched. Use 1 for testing.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: array
                items: 
                  "$ref": "#/components/schemas/Order_items"
        '404':
          description: Invalid Cart ID supplied, Cart not found
  "/orders/items/{itemId}":
    get:
      tags:
      - orders
      summary: Get order item by order item id
      description: ''
      operationId: getOrderItemById
      parameters:
      - name: itemId
        in: path
        description: 'The order item id that needs to be fetched. Use 2 for testing. '
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Order_items"
        '404':
          description: Invalid Order Item ID supplied, order item not found
    put:
      tags:
      - orders
      summary: Get order item by order item id
      description: ''
      operationId: getOrderItemByOrderId
      parameters:
      - name: itemId
        in: path
        description: 'The order item id for items to be fetched. Use 2 for testing.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Order_items"
        '400':
          description: product id not valid, required value missing
        '404':
          description: Invalid Order Item ID supplied, Order Item not found
        '409':
          description: product_id violates foreign key constraint
      requestBody:
        "$ref": "#/components/requestBodies/CartItemsPut"
    delete:
      tags:
      - orders
      summary: Delete order item
      description: Done by the user
      operationId: deleteOrderItem
      parameters:
      - name: itemId
        in: path
        description: 'The order item id that needs to be deleted. In testing, use before() to generate order item to delete.'
        required: true
        schema:
          type: integer
          minimum: 1
      responses:
        '200':
          description: Deleted order item - order item's id returned as a string
          content:
            text/plain: 
              schema:
                type: string
        '404':
          description: Order item not found, invalid order item id
components:
  schemas:
    Carts:
      type: object
      properties:
        id:
          type: integer
          format: int32
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        used_id:
          type: integer
          format: int32
    Cart_items:
      type: object
      properties:
        id:
          type: integer
          format: int32
        user_id:
          type: integer
          format: int32
        product_id:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
    Products:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        model_number:
          type: string
        description:
          type: string
        price:
          type: number
          format: Decimal
    Orders:
      type: object
      properties:
        id:
          type: integer
          format: int32
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        status:
          type: string
        total_price:
          type: number
          format: Decimal
        user_id:
          type: integer
          format: int32
    Order_items:
      type: object
      properties:
        id:
          type: integer
          format: int32
        order_id:
          type: integer
          format: int32
        product_id:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        price_unit:
          type: number
          format: Decimal
    Users:
      type: object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          format: email
        password_hash:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
      xml:
        name: User
  requestBodies:
    CartItemsPost:
      content:
        application/json:
          schema:
            type: object
            properties:
              cart_id:
                type: integer
                format: int32
              product_id:
                type: integer
                format: int32
              quantity:
                type: integer
                format: int32
    CartItemsPut:
      content:
        application/json:
          schema:
            type: object
            properties:
              product_id:
                type: integer
                format: int32
              quantity:
                type: integer
                format: int32
    Carts:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int32
              created:
                type: string
                format: date-time
              modified:
                type: string
                format: date-time
              used_id:
                type: integer
                format: int32
    CartsPost:
      content:
        application/json:
          schema:
            type: object
            properties:
              created:
                type: string
                format: date-time
              used_id:
                type: integer
                format: int32
    CartsPut:
      content:
        application/json:
          schema:
            type: object
            properties:
              modified:
                type: string
                format: date-time
              used_id:
                type: integer
                format: int32
    OrdersPost:
      content:
        application/json:
          schema:
            type: object
            properties:
              created:
                type: string
                format: date-time
              total_price:
                type: number
                format: Decimal
              used_id:
                type: integer
                format: int32
    OrdersPut:
      content:
        application/json:
          schema:
            type: object
            properties:
              modified:
                type: string
                format: date-time
              status:
                type: string
              total_price:
                type: number
                format: Decimal
              used_id:
                type: integer
                format: int32
    ProductArray:
      content:
        application/json:
          schema:
            type: array
            items:
              "$ref": "#/components/schemas/Products"
      description: List of product object
      required: true
    Products:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              model_number:
                type: string
              description:
                type: string
              price:
                type: number
                format: Decimal
    UsersArray:
      content:
        application/json:
          schema:
            type: array
            items:
              "$ref": "#/components/schemas/Users"
      description: List of user object
      required: true
    UsersPost:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              phone:
                type: string
      description: 'Note: password is sent in plaintext, and password_hash is in Response'
      required: true
    UsersPostGoogle:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password_hash:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              phone:
                type: string
              google: 
                type: integer
                format: int32
      description: 'Note: password_hash is sent, and password_hash is in Response'
      required: true    
    UsersPut:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              phone:
                type: string
      description: ''
      required: true
    AuthRegister:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              phone:
                type: string
      description: 'Note: password is sent in plaintext, and password_hash is in Response'
      required: true
    AuthLogin:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      description: 'Note: password is sent in plaintext'
      required: true